# BROKEBOT PROJECT - Local AI Assistant

# ChatGPT Clone running in browser with WebLLM and IndexedDB

## PROJECT DESCRIPTION

brokebot is a web application that serves as a ChatGPT clone, operating 100% locally in the browser.
It uses WebLLM for AI models and IndexedDB for persistent storage, ensuring privacy,
free usage, and offline functionality.

## CRITICAL RULES - ABSOLUTELY MUST FOLLOW

### CSS/Styling Rules - NEVER BREAK THESE

- **DO NOT MODIFY** padding, margin, width, height, border styles unless EXPLICITLY requested
- **DO NOT "FIX"** layout styles on your own initiative
- **DO NOT CHANGE** existing CSS classes without specific user request
- **DO NOT ADJUST** spacing, sizing, or positioning unless user asks for it
- **ONLY TOUCH** styles when user specifically mentions styling issues
- **ASK FIRST** before making any visual/layout changes
- **FOCUS ONLY** on the exact problem user describes

### General Development Rules

- **DO ONLY** what user explicitly requests
- **DO NOT** make assumptions about improvements needed
- **DO NOT** proactively refactor unless asked
- **ASK QUESTIONS** instead of guessing user intent

## SENIOR-LEVEL DEVELOPMENT PRACTICES

### Component Architecture

- **Single Responsibility Principle** - each component has one responsibility
- **Composition over Inheritance** - components composed of smaller parts
- **Container/Presentational Pattern** - separate logic from UI
- **Custom Hooks** - extract business logic to hooks
- **Proper Error Boundaries** - error handling at appropriate levels
- **Performance Optimization** - React.memo, useMemo, useCallback where needed

### Folder Structure

```
src/components/
├── feature-name/
│   ├── components/
│   │   ├── SubComponent.tsx
│   │   └── index.ts
│   ├── hooks/
│   │   ├── useFeatureLogic.ts
│   │   └── index.ts
│   ├── types/
│   │   └── index.ts
│   ├── utils/
│   │   └── index.ts
│   ├── FeatureComponent.tsx
│   └── index.ts
```

### Component Conventions

- **Max 150 lines per component** - split larger ones into smaller pieces
- **Props interface over inline type** - readability and reusability
- **Default props through destructuring** - `{ prop = defaultValue }`
- **Event handlers prefixed** - `handleSomething`, `onSomething`
- **Boolean props prefixed** - `isLoading`, `hasError`, `canEdit`
- **Render functions suffixed** - `renderHeader`, `renderContent`

### Custom Hooks Guidelines

- **Prefix with `use`** - consistent naming
- **Single concern** - one hook = one responsibility
- **Return object for multiple values** - `{ data, isLoading, error }`
- **Memoization** - use useMemo/useCallback for performance
- **Dependencies arrays** - always complete and correct

### TypeScript Best Practices

- **Strict mode enabled** - highest level of typing
- **Interface over type** - for object shapes
- **Generic constraints** - `<T extends SomeType>`
- **Utility types** - `Pick`, `Omit`, `Partial`, `Required`
- **Proper return types** - don't rely on inference for public APIs
- **No `any`** - always concrete types

## CODING CONVENTIONS

### Language

- **ENGLISH ONLY** in code - all variable names, functions, comments, strings
- **ENGLISH ONLY** in user interface - all UI text, labels, messages, tooltips
- **ENGLISH ONLY** everywhere - no Polish text anywhere in the application
- Consistent nomenclature throughout the project

### React Patterns

- **Functional components only** - no class components
- **Hooks first** - custom hooks for business logic
- **Error boundaries** - at feature and app level
- **Suspense boundaries** - for lazy loading
- **Portal usage** - for modals and tooltips
- **Forward refs** - for reusable input components

### State Management

- **Local state first** - useState for component state
- **Custom hooks** - for shared state logic
- **Context sparingly** - only for truly global state
- **Reducer pattern** - for complex state logic
- **Optimistic updates** - for better UX

### Performance

- **React.memo** - for expensive renders
- **Lazy loading** - for route-based code splitting
- **Virtual scrolling** - for long lists
- **Image optimization** - proper loading strategies

### Styling

- **Tailwind CSS classes** - utility-first approach
- **Shadcn/ui components** - consistent design system
- **CSS-in-JS sparingly** - only when Tailwind isn't enough
- **Mobile-first approach** - responsive design pattern
- **Design tokens** - consistent spacing, colors, typography

### Testing Strategy

- **Unit tests** - for utils and pure functions
- **Integration tests** - for hook interactions
- **Component tests** - React Testing Library
- **E2E tests** - for critical user flows
- **Visual regression** - for UI consistency

## FILE STRUCTURE

### Component Organization

```
src/components/chat/
├── interface/
│   ├── components/
│   │   ├── ChatGuard.tsx
│   │   └── index.ts
│   ├── hooks/
│   │   ├── useChatGuard.ts
│   │   └── index.ts
│   ├── ChatInterface.tsx
│   └── index.ts
├── header/
│   ├── components/
│   │   ├── BreadcrumbNavigation.tsx
│   │   ├── ActionButtons.tsx
│   │   └── index.ts
│   ├── hooks/
│   │   ├── useHeaderActions.ts
│   │   └── index.ts
│   ├── ChatHeader.tsx
│   └── index.ts
```

### Hook Organization

```
src/hooks/
├── api/
│   ├── useConversations.ts
│   ├── useMessages.ts
│   └── index.ts
├── ui/
│   ├── useKeyboardShortcuts.ts
│   ├── useToast.ts
│   └── index.ts
├── business/
│   ├── useChatLogic.ts
│   ├── useConversationManagement.ts
│   └── index.ts
```

## TECH STACK

- **Frontend**: Vite + React 19 + TypeScript
- **UI Library**: Shadcn/ui + Tailwind CSS + Radix UI
- **Routing**: react-router-dom v7
- **State**: React hooks + Context (sparingly)
- **Local AI**: @mlc-ai/web-llm
- **Database**: Dexie.js (IndexedDB wrapper)
- **File Handling**: Native File API + IndexedDB storage
- **Backend**: Appwrite (auth, cloud sync, payments)
- **Payment**: Stripe integration
- **Testing**: Vitest + React Testing Library + Playwright
- **Linting**: ESLint + Prettier + TypeScript strict

## DATABASE ARCHITECTURE (IndexedDB via Dexie.js)

### Table: conversations

- id: string (UUID, primary key)
- title: string (conversation title)
- messages: Message[] (embedded documents)
- pinned: boolean
- createdAt: Date
- updatedAt: Date
- userId?: string (for logged users)
- modelId?: string (which model was used)

### Table: documents

- id: number (primary key, auto-increment)
- filename: string
- content: string
- createdAt: Date
- fileType: 'txt' | 'md'

### Table: userConfig

- id: "user_config" (singleton key)
- username: string
- avatarUrl?: string
- selectedModelId: string
- autoLoadModel: boolean
- openaiApiKey?: string (encrypted)
- anthropicApiKey?: string (encrypted)
- googleApiKey?: string (encrypted)
- theme: "light" | "dark" | "system"
- createdAt: Date
- updatedAt: Date

## FILE MANAGEMENT ARCHITECTURE

### Local File Processing
- **File Upload**: Native File API for file selection and reading
- **Supported Formats**: .txt and .md files only
- **File Size Limit**: 10MB maximum per file
- **Content Extraction**: Text content read and stored in IndexedDB
- **AI Integration**: File content automatically included in chat context

### File Storage Strategy
- **Local First**: All files stored locally in IndexedDB
- **Document Manager**: Centralized UI for file management
- **Content Indexing**: Full text content stored for AI processing
- **Metadata Tracking**: Filename, size, type, upload date
- **Cloud Sync Ready**: Architecture prepared for Appwrite integration

### File Workflow
1. **Upload**: User selects .txt/.md files via drag-drop or file picker
2. **Validation**: File type and size validation
3. **Processing**: Content extraction and storage in IndexedDB
4. **Chat Integration**: Files attached to messages provide context to AI
5. **Management**: View, delete, and organize files through DocumentManager

## QUALITY GATES

### Code Review Checklist

- [ ] Single responsibility per component/hook
- [ ] Proper TypeScript typing (no `any`)
- [ ] Performance optimizations where needed
- [ ] Accessibility compliance (WCAG 2.1)
- [ ] Mobile responsiveness
- [ ] Error handling implemented
- [ ] Loading states handled
- [ ] Tests written and passing
- [ ] No console errors or warnings
- [ ] Consistent naming conventions

### Performance Targets

- [ ] Bundle size < 2MB
- [ ] First Contentful Paint < 1.5s
- [ ] Largest Contentful Paint < 2.5s
- [ ] Cumulative Layout Shift < 0.1
- [ ] First Input Delay < 100ms

### Accessibility Targets

- [ ] Keyboard navigation support
- [ ] Screen reader compatibility
- [ ] Color contrast compliance
- [ ] Focus management
- [ ] ARIA labels where needed

## MVP SUCCESS METRICS

- [x] User can write message and receive response
- [x] Conversation history preserved after refresh
- [x] Can create new conversations
- [x] Can attach .txt/.md files and AI responds based on content
- [x] Document management (upload, view, delete)
- [x] Local file storage with IndexedDB
- [x] UI is responsive and professional
- [x] Application works offline
- [x] Smooth animations and transitions
- [x] Chat filtering and search
- [x] Chat management (pin, rename, delete)

## DEVELOPMENT WORKFLOW

1. **Feature Planning** - wireframes + technical design
2. **Component Breakdown** - identify reusable pieces
3. **Hook Design** - plan state management strategy
4. **TDD Approach** - write tests first for complex logic
5. **Progressive Enhancement** - start with basic functionality
6. **Performance Optimization** - measure and optimize
7. **Accessibility Testing** - keyboard and screen reader testing
8. **Code Review** - peer review against quality gates

## SENIOR DEVELOPER NOTES

1. **Composition Pattern** - prefer composition over large monolithic components
2. **Performance First** - measure before optimizing, but think about it early
3. **Accessibility by Design** - not an afterthought
4. **Error Boundaries** - fail gracefully, inform users appropriately
5. **Type Safety** - leverage TypeScript's power fully
6. **Testing Strategy** - test behavior, not implementation
7. **Code Reusability** - abstract common patterns into hooks/utils
8. **Documentation** - code should be self-documenting with proper naming
9. **Progressive Enhancement** - work offline, sync when online
10. **User Experience** - every interaction should feel smooth and predictable

Remember: "Make it work, make it right, make it fast" - in that order!
